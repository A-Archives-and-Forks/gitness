// Code generated by Wire. DO NOT EDIT.

//go:build !wireinject && !harness
// +build !wireinject,!harness

package server

import (
	"context"

	"github.com/harness/gitness/gitrpc"
	server2 "github.com/harness/gitness/gitrpc/server"
	"github.com/harness/gitness/internal/api/controller/repo"
	"github.com/harness/gitness/internal/api/controller/serviceaccount"
	"github.com/harness/gitness/internal/api/controller/space"
	"github.com/harness/gitness/internal/api/controller/user"
	"github.com/harness/gitness/internal/auth/authn"
	"github.com/harness/gitness/internal/auth/authz"
	"github.com/harness/gitness/internal/bootstrap"
	"github.com/harness/gitness/internal/cron"
	"github.com/harness/gitness/internal/router"
	"github.com/harness/gitness/internal/server"
	"github.com/harness/gitness/internal/store"
	"github.com/harness/gitness/internal/store/database"
	"github.com/harness/gitness/internal/store/memory"
	"github.com/harness/gitness/types"
	"github.com/harness/gitness/types/check"
)

// Injectors from standalone.wire.go:

func initSystem(ctx context.Context, config *types.Config) (*system, error) {
	checkUser := check.ProvideUserCheck()
	authorizer := authz.ProvideAuthorizer()
	db, err := database.ProvideDatabase(ctx, config)
	if err != nil {
		return nil, err
	}
	principalUIDTransformation := store.ProvidePrincipalUIDTransformation()
	userStore := database.ProvideUserStore(db, principalUIDTransformation)
	tokenStore := database.ProvideTokenStore(db)
	controller := user.NewController(checkUser, authorizer, userStore, tokenStore)
	bootstrapBootstrap := bootstrap.ProvideBootstrap(config, controller)
	systemStore := memory.New(config)
	serviceAccountStore := database.ProvideServiceAccountStore(db, principalUIDTransformation)
	authenticator := authn.ProvideAuthenticator(userStore, serviceAccountStore, tokenStore)
	checkRepo := check.ProvideRepoCheck()
	pathTransformation := store.ProvidePathTransformation()
	spaceStore := database.ProvideSpaceStore(db, pathTransformation)
	repoStore := database.ProvideRepoStore(db, pathTransformation)
	gitrpcConfig := ProvideGitRPCClientConfig(config)
	gitrpcInterface, err := gitrpc.ProvideClient(gitrpcConfig)
	if err != nil {
		return nil, err
	}
	repoController := repo.ProvideController(config, checkRepo, authorizer, spaceStore, repoStore, serviceAccountStore, gitrpcInterface)
	checkSpace := check.ProvideSpaceCheck()
	spaceController := space.NewController(checkSpace, authorizer, spaceStore, repoStore, serviceAccountStore)
	serviceAccount := check.ProvideServiceAccountCheck()
	serviceaccountController := serviceaccount.NewController(serviceAccount, authorizer, serviceAccountStore, spaceStore, repoStore, tokenStore)
	apiHandler := router.ProvideAPIHandler(systemStore, authenticator, repoController, spaceController, serviceaccountController, controller)
	gitHandler := router.ProvideGitHandler(repoStore, authenticator, gitrpcInterface)
	webHandler := router.ProvideWebHandler(systemStore)
	routerRouter := router.ProvideRouter(apiHandler, gitHandler, webHandler)
	serverServer := server.ProvideServer(config, routerRouter)
	serverConfig := ProvideGitRPCServerConfig(config)
	server3, err := server2.ProvideServer(serverConfig)
	if err != nil {
		return nil, err
	}
	nightly := cron.NewNightly()
	serverSystem := newSystem(bootstrapBootstrap, serverServer, server3, nightly)
	return serverSystem, nil
}
