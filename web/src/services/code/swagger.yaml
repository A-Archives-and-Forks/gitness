openapi: 3.0.0
info:
  title: API Specification
  version: 1.0.0
servers:
- url: /api/v1/
security:
- bearerAuth: []
paths:
  /login:
    post:
      operationId: onLogin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormDataOpenapiLoginRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - account
  /register:
    post:
      operationId: onRegister
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormDataOpenapiRegisterRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - account
  /repos:
    post:
      operationId: createRepository
      parameters:
      - description: path of parent space (Not needed in standalone).
        in: query
        name: space_path
        required: false
        schema:
          default: false
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateRepositoryRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}:
    delete:
      operationId: deleteRepository
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
    get:
      operationId: findRepository
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
    patch:
      operationId: updateRepository
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateRepoRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/branches:
    get:
      operationId: listBranches
      parameters:
      - description: Indicates whether optional commit information should be included
          in the response.
        in: query
        name: include_commit
        required: false
        schema:
          default: false
          type: boolean
      - description: The substring by which the branches are filtered.
        in: query
        name: query
        required: false
        schema:
          type: string
      - description: The order of the output.
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
      - description: The data by which the branches are sorted.
        in: query
        name: sort
        required: false
        schema:
          default: name
          enum:
          - name
          - date
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoBranch'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
    post:
      operationId: createBranch
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateBranchRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoBranch'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/branches/{branch_name}:
    delete:
      operationId: deleteBranch
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: branch_name
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/commits:
    get:
      operationId: listCommits
      parameters:
      - description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        in: query
        name: git_ref
        required: false
        schema:
          default: '{Repository Default Branch}'
          type: string
      - description: The result should only contain commits that occurred after the
          provided reference.
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoCommit'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
    post:
      operationId: commitFiles
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommitFilesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoCommitFilesResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/commits/calculate-divergence:
    post:
      operationId: calculateCommitDivergence
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCalculateCommitDivergenceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoCommitDivergence'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/compare/{range}:
    get:
      operationId: rawDiff
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: range
        required: true
        schema:
          example: main..dev
          type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/content/{path}:
    get:
      operationId: getContent
      parameters:
      - description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        in: query
        name: git_ref
        required: false
        schema:
          default: '{Repository Default Branch}'
          type: string
      - description: Indicates whether optional commit information should be included
          in the response.
        in: query
        name: include_commit
        required: false
        schema:
          default: false
          type: boolean
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiGetContentOutput'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/move:
    post:
      operationId: moveRepository
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveRepoRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/paths:
    get:
      operationId: listRepositoryPaths
      parameters:
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPath'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
    post:
      operationId: createRepositoryPath
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateRepoPathRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPath'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/paths/{path_id}:
    delete:
      operationId: deleteRepositoryPath
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: path_id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/pullreq:
    get:
      operationId: listPullReq
      parameters:
      - description: The state of the pull requests to include in the result.
        in: query
        name: state
        required: false
        schema:
          items:
            default: open
            enum:
            - open
            - closed
            - merged
            - rejected
            type: string
          type: array
      - description: Source repository ref of the pull requests.
        in: query
        name: source_repo_ref
        required: false
        schema:
          type: string
      - description: Source branch of the pull requests.
        in: query
        name: source_branch
        required: false
        schema:
          type: string
      - description: Target branch of the pull requests.
        in: query
        name: target_branch
        required: false
        schema:
          type: string
      - description: The substring by which the pull requests are filtered.
        in: query
        name: query
        required: false
        schema:
          type: string
      - description: The principal ID who created pull requests.
        in: query
        name: created_by
        required: false
        schema:
          type: integer
      - description: The order of the output.
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
      - description: The data by which the pull requests are sorted.
        in: query
        name: sort
        required: false
        schema:
          default: number
          enum:
          - number
          - created
          - updated
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPullReq'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
    post:
      operationId: createPullReq
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreatePullReqRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}:
    get:
      operationId: getPullReq
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: pullreq_number
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
    patch:
      operationId: updatePullReq
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: pullreq_number
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/activities:
    get:
      operationId: listPullReqActivities
      parameters:
      - description: The kind of the pull request activity to include in the result.
        in: query
        name: kind
        required: false
        schema:
          items:
            enum:
            - system
            - comment
            - code
            type: string
          type: array
      - description: The type of the pull request activity to include in the result.
        in: query
        name: type
        required: false
        schema:
          items:
            enum:
            - comment
            - code-comment
            - title-change
            type: string
          type: array
      - description: The result should contain only entries created at and after this
          timestamp (unix millis).
        in: query
        name: after
        required: false
        schema:
          minimum: 0
          type: integer
      - description: The result should contain only entries created before this timestamp
          (unix millis).
        in: query
        name: before
        required: false
        schema:
          minimum: 0
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: pullreq_number
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPullReqActivity'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments:
    post:
      operationId: commentCreatePullReq
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: pullreq_number
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentCreatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments/{pullreq_comment_id}:
    delete:
      operationId: commentDeletePullReq
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: pullreq_number
        required: true
        schema:
          type: integer
      - in: path
        name: pullreq_comment_id
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
    patch:
      operationId: commentUpdatePullReq
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: pullreq_number
        required: true
        schema:
          type: integer
      - in: path
        name: pullreq_comment_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentUpdatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/merge:
    post:
      operationId: mergePullReqOp
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: pullreq_number
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMergePullReq'
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Method Not Allowed
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unprocessable Entity
      tags:
      - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/review:
    post:
      operationId: reviewSubmitPullReq
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: pullreq_number
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReviewSubmitPullReqRequest'
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviewers:
    get:
      operationId: reviewerListPullReq
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: pullreq_number
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
    put:
      operationId: reviewerAddPullReq
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: pullreq_number
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReviewerAddPullReqRequest'
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - pullreq
  /repos/{repo_ref}/service-accounts:
    get:
      operationId: listRepositoryServiceAccounts
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesServiceAccount'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/tags:
    get:
      operationId: listTags
      parameters:
      - description: Indicates whether optional commit information should be included
          in the response.
        in: query
        name: include_commit
        required: false
        schema:
          default: false
          type: boolean
      - description: The substring by which the tags are filtered.
        in: query
        name: query
        required: false
        schema:
          type: string
      - description: The order of the output.
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
      - description: The data by which the tags are sorted.
        in: query
        name: sort
        required: false
        schema:
          default: name
          enum:
          - name
          - date
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoCommitTag'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repo_ref}/webhooks:
    get:
      operationId: listWebhooks
      parameters:
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OpenapiWebhookType'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - webhook
    post:
      operationId: createWebhook
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateWebhookRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - webhook
  /repos/{repo_ref}/webhooks/{webhook_id}:
    delete:
      operationId: deleteWebhook
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: webhook_id
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - webhook
    get:
      operationId: getWebhook
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: webhook_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - webhook
    patch:
      operationId: updateWebhook
      parameters:
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: webhook_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateWebhookRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - webhook
  /repos/{repo_ref}/webhooks/{webhook_id}/executions:
    get:
      operationId: listWebhookExecutions
      parameters:
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: webhook_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OpenapiWebhookExecutionType'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - webhook
  /repos/{repo_ref}/webhooks/{webhook_id}/executions/{webhook_execution_id}:
    get:
      operationId: getWebhookExecution
      parameters:
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repo_ref
        required: true
        schema:
          type: string
      - in: path
        name: webhook_id
        required: true
        schema:
          type: integer
      - in: path
        name: webhook_execution_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookExecutionType'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - webhook
  /resources/gitignore:
    get:
      operationId: listGitignore
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - resource
  /resources/license:
    get:
      operationId: listLicenses
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - resource
  /spaces:
    post:
      operationId: createSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateSpaceRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{space_ref}:
    delete:
      operationId: deleteSpace
      parameters:
      - in: path
        name: space_ref
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
    get:
      operationId: getSpace
      parameters:
      - in: path
        name: space_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
    patch:
      operationId: updateSpace
      parameters:
      - in: path
        name: space_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateSpaceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{space_ref}/move:
    post:
      operationId: moveSpace
      parameters:
      - in: path
        name: space_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveSpaceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{space_ref}/paths:
    get:
      operationId: listPaths
      parameters:
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: space_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPath'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
    post:
      operationId: createPath
      parameters:
      - in: path
        name: space_ref
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreatePathRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPath'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{space_ref}/paths/{path_id}:
    delete:
      operationId: deletePath
      parameters:
      - in: path
        name: space_ref
        required: true
        schema:
          type: string
      - in: path
        name: path_id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{space_ref}/repos:
    get:
      operationId: listRepos
      parameters:
      - description: The substring which is used to filter the repositories by their
          path name.
        in: query
        name: query
        required: false
        schema:
          type: string
      - description: The data by which the repositories are sorted.
        in: query
        name: sort
        required: false
        schema:
          default: uid
          enum:
          - uid
          - path
          - created
          - updated
          type: string
      - description: The order of the output.
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: space_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesRepository'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{space_ref}/service-accounts:
    get:
      operationId: listServiceAccounts
      parameters:
      - in: path
        name: space_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesServiceAccount'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{space_ref}/spaces:
    get:
      operationId: listSpaces
      parameters:
      - description: The substring which is used to filter the spaces by their path
          name.
        in: query
        name: query
        required: false
        schema:
          type: string
      - description: The data by which the spaces are sorted.
        in: query
        name: sort
        required: false
        schema:
          default: uid
          enum:
          - uid
          - path
          - created
          - updated
          type: string
      - description: The order of the output.
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: space_ref
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesSpace'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /user:
    get:
      operationId: getUser
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - user
    patch:
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - user
  /user/token:
    post:
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypesTokenResponse'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - user
  /users:
    get:
      operationId: listUsers
      parameters:
      - in: query
        name: sort
        schema:
          enum:
          - id
          - email
          - created
          - updated
          type: string
      - in: query
        name: order
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: query
        name: page
        schema:
          default: 1
          type: integer
      - in: query
        name: limit
        schema:
          default: 30
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesUser'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - users
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypesUserInput'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - users
  /users/{email}:
    delete:
      operationId: deleteUser
      parameters:
      - in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - users
    get:
      operationId: getUserEmail
      parameters:
      - in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - users
components:
  schemas:
    EnumAccessGrant:
      type: integer
    EnumMergeMethod:
      type: string
    EnumParentResourceType:
      type: string
    EnumPathTargetType:
      type: string
    EnumPullReqActivityKind:
      type: string
    EnumPullReqActivityType:
      type: string
    EnumPullReqState:
      type: string
    EnumTokenType:
      type: string
    EnumWebhookExecutionResult:
      nullable: true
      type: string
    EnumWebhookParent:
      type: string
    EnumWebhookTrigger:
      type: string
    FormDataOpenapiLoginRequest:
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    FormDataOpenapiRegisterRequest:
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    GitrpcFileAction:
      enum:
      - CREATE
      - UPDATE
      - DELETE
      - MOVE
      type: string
    OpenapiCalculateCommitDivergenceRequest:
      properties:
        max_count:
          type: integer
        requests:
          items:
            $ref: '#/components/schemas/RepoCommitDivergenceRequest'
          nullable: true
          type: array
      type: object
    OpenapiCommentCreatePullReqRequest:
      properties:
        parent_id:
          type: integer
        payload:
          additionalProperties: {}
          nullable: true
          type: object
        text:
          type: string
      type: object
    OpenapiCommentUpdatePullReqRequest:
      properties:
        payload:
          additionalProperties: {}
          nullable: true
          type: object
        text:
          type: string
      type: object
    OpenapiCommitFilesRequest:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/RepoCommitFileAction'
          nullable: true
          type: array
        branch:
          type: string
        message:
          type: string
        new_branch:
          type: string
        title:
          type: string
      type: object
    OpenapiContent:
      oneOf:
      - $ref: '#/components/schemas/RepoFileContent'
      - $ref: '#/components/schemas/OpenapiDirContent'
      - $ref: '#/components/schemas/RepoSymlinkContent'
      - $ref: '#/components/schemas/RepoSubmoduleContent'
      type: object
    OpenapiContentInfo:
      properties:
        latest_commit:
          $ref: '#/components/schemas/RepoCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
      type: object
    OpenapiContentType:
      enum:
      - file
      - dir
      - symlink
      - submodule
      type: string
    OpenapiCreateBranchRequest:
      properties:
        name:
          type: string
        target:
          nullable: true
          type: string
      type: object
    OpenapiCreatePathRequest:
      properties:
        path:
          type: string
      type: object
    OpenapiCreatePullReqRequest:
      properties:
        description:
          type: string
        source_branch:
          type: string
        source_repo_ref:
          type: string
        target_branch:
          type: string
        title:
          type: string
      type: object
    OpenapiCreateRepoPathRequest:
      properties:
        path:
          type: string
      type: object
    OpenapiCreateRepositoryRequest:
      properties:
        default_branch:
          type: string
        description:
          type: string
        fork_id:
          type: integer
        git_ignore:
          type: string
        is_public:
          type: boolean
        license:
          type: string
        parent_id:
          type: integer
        readme:
          type: boolean
        uid:
          type: string
      type: object
    OpenapiCreateSpaceRequest:
      properties:
        description:
          type: string
        is_public:
          type: boolean
        parent_id:
          type: integer
        uid:
          type: string
      type: object
    OpenapiCreateWebhookRequest:
      properties:
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        insecure:
          type: boolean
        secret:
          type: string
        triggers:
          items:
            $ref: '#/components/schemas/OpenapiWebhookTrigger'
          nullable: true
          type: array
        url:
          type: string
      type: object
    OpenapiDirContent:
      properties:
        entries:
          items:
            $ref: '#/components/schemas/OpenapiContentInfo'
          nullable: true
          type: array
      type: object
    OpenapiGetContentOutput:
      properties:
        content:
          $ref: '#/components/schemas/OpenapiContent'
        latest_commit:
          $ref: '#/components/schemas/RepoCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
      type: object
    OpenapiMergePullReq:
      properties:
        delete_branch:
          type: boolean
        force:
          type: boolean
        method:
          $ref: '#/components/schemas/EnumMergeMethod'
      type: object
    OpenapiMoveRepoRequest:
      properties:
        keep_as_alias:
          type: boolean
        parent_id:
          nullable: true
          type: integer
        uid:
          nullable: true
          type: string
      type: object
    OpenapiMoveSpaceRequest:
      properties:
        keep_as_alias:
          type: boolean
        parent_id:
          nullable: true
          type: integer
        uid:
          nullable: true
          type: string
      type: object
    OpenapiReviewSubmitPullReqRequest:
      properties:
        decision:
          type: string
        message:
          type: string
      type: object
    OpenapiReviewerAddPullReqRequest:
      properties:
        reviewer_id:
          type: integer
      type: object
    OpenapiUpdatePullReqRequest:
      properties:
        description:
          type: string
        title:
          type: string
      type: object
    OpenapiUpdateRepoRequest:
      properties:
        description:
          nullable: true
          type: string
        is_public:
          nullable: true
          type: boolean
      type: object
    OpenapiUpdateSpaceRequest:
      properties:
        description:
          nullable: true
          type: string
        is_public:
          nullable: true
          type: boolean
      type: object
    OpenapiUpdateWebhookRequest:
      properties:
        description:
          nullable: true
          type: string
        display_name:
          nullable: true
          type: string
        enabled:
          nullable: true
          type: boolean
        insecure:
          nullable: true
          type: boolean
        secret:
          nullable: true
          type: string
        triggers:
          items:
            $ref: '#/components/schemas/OpenapiWebhookTrigger'
          nullable: true
          type: array
        url:
          nullable: true
          type: string
      type: object
    OpenapiWebhookExecutionResult:
      enum:
      - success
      - retriable_error
      - fatal_error
      nullable: true
      type: string
    OpenapiWebhookExecutionType:
      properties:
        created:
          type: integer
        duration:
          type: integer
        error:
          type: string
        id:
          type: integer
        request:
          $ref: '#/components/schemas/TypesWebhookExecutionRequest'
        response:
          $ref: '#/components/schemas/TypesWebhookExecutionResponse'
        result:
          $ref: '#/components/schemas/OpenapiWebhookExecutionResult'
        retrigger_of:
          nullable: true
          type: integer
        retriggerable:
          type: boolean
        trigger_type:
          $ref: '#/components/schemas/OpenapiWebhookTrigger'
        webhook_id:
          type: integer
      type: object
    OpenapiWebhookParent:
      enum:
      - repo
      - space
      type: string
    OpenapiWebhookTrigger:
      enum:
      - branch_created
      - branch_updated
      - branch_deleted
      - tag_created
      - tag_updated
      - tag_deleted
      type: string
    OpenapiWebhookType:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        has_secret:
          type: boolean
        id:
          type: integer
        insecure:
          type: boolean
        latest_execution_result:
          $ref: '#/components/schemas/OpenapiWebhookExecutionResult'
        parent_id:
          type: integer
        parent_type:
          $ref: '#/components/schemas/OpenapiWebhookParent'
        triggers:
          items:
            $ref: '#/components/schemas/OpenapiWebhookTrigger'
          nullable: true
          type: array
        updated:
          type: integer
        url:
          type: string
        version:
          type: integer
      type: object
    RepoBranch:
      properties:
        commit:
          $ref: '#/components/schemas/RepoCommit'
        name:
          type: string
        sha:
          type: string
      type: object
    RepoCommit:
      properties:
        author:
          $ref: '#/components/schemas/RepoSignature'
        committer:
          $ref: '#/components/schemas/RepoSignature'
        message:
          type: string
        sha:
          type: string
        title:
          type: string
      type: object
    RepoCommitDivergence:
      properties:
        ahead:
          type: integer
        behind:
          type: integer
      type: object
    RepoCommitDivergenceRequest:
      properties:
        from:
          type: string
        to:
          type: string
      type: object
    RepoCommitFileAction:
      properties:
        action:
          $ref: '#/components/schemas/GitrpcFileAction'
        encoding:
          type: string
        path:
          type: string
        payload:
          type: string
        sha:
          type: string
      type: object
    RepoCommitFilesResponse:
      properties:
        commit_id:
          type: string
      type: object
    RepoCommitTag:
      properties:
        commit:
          $ref: '#/components/schemas/RepoCommit'
        is_annotated:
          type: boolean
        message:
          type: string
        name:
          type: string
        sha:
          type: string
        tagger:
          $ref: '#/components/schemas/RepoSignature'
        title:
          type: string
      type: object
    RepoContent: {}
    RepoContentInfo:
      properties:
        latest_commit:
          $ref: '#/components/schemas/RepoCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/RepoContentType'
      type: object
    RepoContentType:
      type: string
    RepoFileContent:
      properties:
        data:
          type: string
        encoding:
          $ref: '#/components/schemas/RepoFileEncodingType'
        size:
          type: integer
      type: object
    RepoFileEncodingType:
      type: string
    RepoIdentity:
      properties:
        email:
          type: string
        name:
          type: string
      type: object
    RepoSignature:
      properties:
        identity:
          $ref: '#/components/schemas/RepoIdentity'
        when:
          format: date-time
          type: string
      type: object
    RepoSubmoduleContent:
      properties:
        commit_sha:
          type: string
        url:
          type: string
      type: object
    RepoSymlinkContent:
      properties:
        size:
          type: integer
        target:
          type: string
      type: object
    TypesPath:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        id:
          type: integer
        is_alias:
          type: boolean
        target_id:
          type: integer
        target_type:
          $ref: '#/components/schemas/EnumPathTargetType'
        updated:
          type: integer
        value:
          type: string
      type: object
    TypesPrincipalInfo:
      nullable: true
      properties:
        display_name:
          type: string
        email:
          type: string
        id:
          type: integer
        uid:
          type: string
      type: object
    TypesPullReq:
      properties:
        author:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        description:
          type: string
        edited:
          type: integer
        id:
          type: integer
        merge_strategy:
          $ref: '#/components/schemas/EnumMergeMethod'
        merged:
          nullable: true
          type: integer
        merger:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        number:
          type: integer
        source_branch:
          type: string
        source_repo_id:
          type: integer
        state:
          $ref: '#/components/schemas/EnumPullReqState'
        target_branch:
          type: string
        target_repo_id:
          type: integer
        title:
          type: string
      type: object
    TypesPullReqActivity:
      properties:
        author:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        deleted:
          nullable: true
          type: integer
        edited:
          type: integer
        id:
          type: integer
        kind:
          $ref: '#/components/schemas/EnumPullReqActivityKind'
        metadata:
          additionalProperties: {}
          nullable: true
          type: object
        order:
          type: integer
        parent_id:
          nullable: true
          type: integer
        payload:
          additionalProperties: {}
          nullable: true
          type: object
        pullreq_id:
          type: integer
        repo_id:
          type: integer
        resolved:
          nullable: true
          type: integer
        resolver:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        sub_order:
          type: integer
        text:
          type: string
        type:
          $ref: '#/components/schemas/EnumPullReqActivityType'
      type: object
    TypesRepository:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        default_branch:
          type: string
        description:
          type: string
        fork_id:
          type: integer
        git_url:
          type: string
        id:
          type: integer
        is_public:
          type: boolean
        num_closed_pulls:
          type: integer
        num_forks:
          type: integer
        num_open_pulls:
          type: integer
        num_pulls:
          type: integer
        parent_id:
          type: integer
        path:
          type: string
        uid:
          type: string
        updated:
          type: integer
        version:
          type: integer
      type: object
    TypesServiceAccount:
      properties:
        admin:
          type: boolean
        blocked:
          type: boolean
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        parent_id:
          type: integer
        parent_type:
          $ref: '#/components/schemas/EnumParentResourceType'
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesSpace:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        id:
          type: integer
        is_public:
          type: boolean
        parent_id:
          type: integer
        path:
          type: string
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesToken:
      properties:
        created_by:
          type: integer
        expires_at:
          type: integer
        grants:
          $ref: '#/components/schemas/EnumAccessGrant'
        issued_at:
          type: integer
        principal_id:
          type: integer
        type:
          $ref: '#/components/schemas/EnumTokenType'
        uid:
          type: string
      type: object
    TypesTokenResponse:
      properties:
        access_token:
          type: string
        token:
          $ref: '#/components/schemas/TypesToken'
      type: object
    TypesUser:
      properties:
        admin:
          type: boolean
        blocked:
          type: boolean
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesUserInput:
      properties:
        admin:
          nullable: true
          type: boolean
        email:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
      type: object
    TypesWebhookExecutionRequest:
      properties:
        body:
          type: string
        headers:
          type: string
        url:
          type: string
      type: object
    TypesWebhookExecutionResponse:
      properties:
        body:
          type: string
        headers:
          type: string
        status:
          type: string
        status_code:
          type: integer
      type: object
    UserUpdateInput:
      properties:
        display_name:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
      type: object
    UsererrorError:
      properties:
        message:
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
