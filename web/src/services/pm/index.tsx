/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig } from '../config'
export const SPEC_VERSION = '1.0.0'
export interface CurrentUserResponse {
  data?: User
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface Error {
  message?: string
}

export interface Execution {
  created?: number
  desc?: string
  id?: number
  name?: string
  pipeline?: number
  slug?: string
  updated?: number
}

export interface ExecutionCreateRequest {
  desc?: string | null
  name?: string | null
  slug?: string | null
}

export interface ExecutionUpdateRequest {
  desc?: string | null
  name?: string | null
  slug?: string | null
}

export interface LoginRequest {
  password?: string
  username?: string
}

export interface Pipeline {
  active?: boolean
  created?: number
  desc?: string
  id?: number
  name?: string
  slug?: string
  updated?: number
}

export interface PipelineCreateRequest {
  desc?: string | null
  name?: string | null
  slug?: string | null
}

export interface PipelineUpdateRequest {
  desc?: string | null
  name?: string | null
  slug?: string | null
}

export interface Project {
  color?: string
  description?: string
  identifier?: string
  modules?: string[] | null
  name?: string
  orgIdentifier?: string
  tags?: {
    [key: string]: string
  } | null
}

export interface ProjectList {
  data?: Project[] | null
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface ProjectListResponse {
  data?: ProjectList
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ProjectResponse {
  data?: Project
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface RegisterRequest {
  password?: string
  username?: string
}

export interface Token {
  access_token?: string
  expires_at?: string
  uri?: string
}

export interface User {
  admin?: boolean
  authed?: number
  company?: string
  created?: number
  email?: string
  id?: number
  name?: string
  updated?: number
}

export interface UserInput {
  admin?: boolean | null
  company?: string | null
  email?: string | null
  name?: string | null
  password?: string | null
}

export interface UserUpdateRequest {
  admin?: boolean | null
  company?: string | null
  email?: string | null
  name?: string | null
  password?: string | null
}

export interface GetProjectQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export interface GetProjectPathParams {
  project: string
}

export type GetProjectProps = Omit<
  GetProps<ProjectResponse, Error, GetProjectQueryParams, GetProjectPathParams>,
  'path'
> &
  GetProjectPathParams

export const GetProject = ({ project, ...props }: GetProjectProps) => (
  <Get<ProjectResponse, Error, GetProjectQueryParams, GetProjectPathParams>
    path={`/api/projects/${project}`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseGetProjectProps = Omit<
  UseGetProps<ProjectResponse, Error, GetProjectQueryParams, GetProjectPathParams>,
  'path'
> &
  GetProjectPathParams

export const useGetProject = ({ project, ...props }: UseGetProjectProps) =>
  useGet<ProjectResponse, Error, GetProjectQueryParams, GetProjectPathParams>(
    (paramsInPath: GetProjectPathParams) => `/api/projects/${paramsInPath.project}`,
    { base: getConfig('pm/api/v1'), pathParams: { project }, ...props }
  )

export type GetCurrentUserProps = Omit<GetProps<CurrentUserResponse, Error, void, void>, 'path'>

export const GetCurrentUser = (props: GetCurrentUserProps) => (
  <Get<CurrentUserResponse, Error, void, void>
    path={`/api/user/currentUser`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseGetCurrentUserProps = Omit<UseGetProps<CurrentUserResponse, Error, void, void>, 'path'>

export const useGetCurrentUser = (props: UseGetCurrentUserProps) =>
  useGet<CurrentUserResponse, Error, void, void>(`/api/user/currentUser`, { base: getConfig('pm/api/v1'), ...props })

export interface ListProjectsQueryParams {
  page?: number
  per_page?: number
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export type ListProjectsProps = Omit<GetProps<ProjectListResponse, Error, ListProjectsQueryParams, void>, 'path'>

export const ListProjects = (props: ListProjectsProps) => (
  <Get<ProjectListResponse, Error, ListProjectsQueryParams, void>
    path={`/api/user/projects`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseListProjectsProps = Omit<UseGetProps<ProjectListResponse, Error, ListProjectsQueryParams, void>, 'path'>

export const useListProjects = (props: UseListProjectsProps) =>
  useGet<ProjectListResponse, Error, ListProjectsQueryParams, void>(`/api/user/projects`, {
    base: getConfig('pm/api/v1'),
    ...props
  })

export type OnLoginProps = Omit<MutateProps<Token, Error, void, void, void>, 'path' | 'verb'>

export const OnLogin = (props: OnLoginProps) => (
  <Mutate<Token, Error, void, void, void> verb="POST" path={`/login`} base={getConfig('pm/api/v1')} {...props} />
)

export type UseOnLoginProps = Omit<UseMutateProps<Token, Error, void, void, void>, 'path' | 'verb'>

export const useOnLogin = (props: UseOnLoginProps) =>
  useMutate<Token, Error, void, void, void>('POST', `/login`, { base: getConfig('pm/api/v1'), ...props })

export interface ListPipelinesQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
  page?: number
  per_page?: number
}

export type ListPipelinesProps = Omit<GetProps<Pipeline[], Error, ListPipelinesQueryParams, void>, 'path'>

export const ListPipelines = (props: ListPipelinesProps) => (
  <Get<Pipeline[], Error, ListPipelinesQueryParams, void>
    path={`/pipelines`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseListPipelinesProps = Omit<UseGetProps<Pipeline[], Error, ListPipelinesQueryParams, void>, 'path'>

export const useListPipelines = (props: UseListPipelinesProps) =>
  useGet<Pipeline[], Error, ListPipelinesQueryParams, void>(`/pipelines`, { base: getConfig('pm/api/v1'), ...props })

export interface CreatePipelineQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export type CreatePipelineProps = Omit<
  MutateProps<Pipeline, Error, CreatePipelineQueryParams, PipelineCreateRequest, void>,
  'path' | 'verb'
>

export const CreatePipeline = (props: CreatePipelineProps) => (
  <Mutate<Pipeline, Error, CreatePipelineQueryParams, PipelineCreateRequest, void>
    verb="POST"
    path={`/pipelines`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseCreatePipelineProps = Omit<
  UseMutateProps<Pipeline, Error, CreatePipelineQueryParams, PipelineCreateRequest, void>,
  'path' | 'verb'
>

export const useCreatePipeline = (props: UseCreatePipelineProps) =>
  useMutate<Pipeline, Error, CreatePipelineQueryParams, PipelineCreateRequest, void>('POST', `/pipelines`, {
    base: getConfig('pm/api/v1'),
    ...props
  })

export interface DeletePipelineQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export type DeletePipelineProps = Omit<
  MutateProps<void, Error, DeletePipelineQueryParams, string, void>,
  'path' | 'verb'
>

export const DeletePipeline = (props: DeletePipelineProps) => (
  <Mutate<void, Error, DeletePipelineQueryParams, string, void>
    verb="DELETE"
    path={`/pipelines`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseDeletePipelineProps = Omit<
  UseMutateProps<void, Error, DeletePipelineQueryParams, string, void>,
  'path' | 'verb'
>

export const useDeletePipeline = (props: UseDeletePipelineProps) =>
  useMutate<void, Error, DeletePipelineQueryParams, string, void>('DELETE', `/pipelines`, {
    base: getConfig('pm/api/v1'),
    ...props
  })

export interface GetPipelineQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export interface GetPipelinePathParams {
  pipeline: string
}

export type GetPipelineProps = Omit<GetProps<Pipeline, Error, GetPipelineQueryParams, GetPipelinePathParams>, 'path'> &
  GetPipelinePathParams

export const GetPipeline = ({ pipeline, ...props }: GetPipelineProps) => (
  <Get<Pipeline, Error, GetPipelineQueryParams, GetPipelinePathParams>
    path={`/pipelines/${pipeline}`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseGetPipelineProps = Omit<
  UseGetProps<Pipeline, Error, GetPipelineQueryParams, GetPipelinePathParams>,
  'path'
> &
  GetPipelinePathParams

export const useGetPipeline = ({ pipeline, ...props }: UseGetPipelineProps) =>
  useGet<Pipeline, Error, GetPipelineQueryParams, GetPipelinePathParams>(
    (paramsInPath: GetPipelinePathParams) => `/pipelines/${paramsInPath.pipeline}`,
    { base: getConfig('pm/api/v1'), pathParams: { pipeline }, ...props }
  )

export interface UpdatePipelineQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export interface UpdatePipelinePathParams {
  pipeline: string
}

export type UpdatePipelineProps = Omit<
  MutateProps<Pipeline, Error, UpdatePipelineQueryParams, PipelineUpdateRequest, UpdatePipelinePathParams>,
  'path' | 'verb'
> &
  UpdatePipelinePathParams

export const UpdatePipeline = ({ pipeline, ...props }: UpdatePipelineProps) => (
  <Mutate<Pipeline, Error, UpdatePipelineQueryParams, PipelineUpdateRequest, UpdatePipelinePathParams>
    verb="PATCH"
    path={`/pipelines/${pipeline}`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseUpdatePipelineProps = Omit<
  UseMutateProps<Pipeline, Error, UpdatePipelineQueryParams, PipelineUpdateRequest, UpdatePipelinePathParams>,
  'path' | 'verb'
> &
  UpdatePipelinePathParams

export const useUpdatePipeline = ({ pipeline, ...props }: UseUpdatePipelineProps) =>
  useMutate<Pipeline, Error, UpdatePipelineQueryParams, PipelineUpdateRequest, UpdatePipelinePathParams>(
    'PATCH',
    (paramsInPath: UpdatePipelinePathParams) => `/pipelines/${paramsInPath.pipeline}`,
    { base: getConfig('pm/api/v1'), pathParams: { pipeline }, ...props }
  )

export interface ListExecutionsQueryParams {
  page?: number
  per_page?: number
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export interface ListExecutionsPathParams {
  pipeline: string
}

export type ListExecutionsProps = Omit<
  GetProps<Execution[], Error, ListExecutionsQueryParams, ListExecutionsPathParams>,
  'path'
> &
  ListExecutionsPathParams

export const ListExecutions = ({ pipeline, ...props }: ListExecutionsProps) => (
  <Get<Execution[], Error, ListExecutionsQueryParams, ListExecutionsPathParams>
    path={`/pipelines/${pipeline}/executions`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseListExecutionsProps = Omit<
  UseGetProps<Execution[], Error, ListExecutionsQueryParams, ListExecutionsPathParams>,
  'path'
> &
  ListExecutionsPathParams

export const useListExecutions = ({ pipeline, ...props }: UseListExecutionsProps) =>
  useGet<Execution[], Error, ListExecutionsQueryParams, ListExecutionsPathParams>(
    (paramsInPath: ListExecutionsPathParams) => `/pipelines/${paramsInPath.pipeline}/executions`,
    { base: getConfig('pm/api/v1'), pathParams: { pipeline }, ...props }
  )

export interface CreateExecutionQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export interface CreateExecutionPathParams {
  pipeline: string
}

export type CreateExecutionProps = Omit<
  MutateProps<Execution, Error, CreateExecutionQueryParams, ExecutionCreateRequest, CreateExecutionPathParams>,
  'path' | 'verb'
> &
  CreateExecutionPathParams

export const CreateExecution = ({ pipeline, ...props }: CreateExecutionProps) => (
  <Mutate<Execution, Error, CreateExecutionQueryParams, ExecutionCreateRequest, CreateExecutionPathParams>
    verb="POST"
    path={`/pipelines/${pipeline}/executions`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseCreateExecutionProps = Omit<
  UseMutateProps<Execution, Error, CreateExecutionQueryParams, ExecutionCreateRequest, CreateExecutionPathParams>,
  'path' | 'verb'
> &
  CreateExecutionPathParams

export const useCreateExecution = ({ pipeline, ...props }: UseCreateExecutionProps) =>
  useMutate<Execution, Error, CreateExecutionQueryParams, ExecutionCreateRequest, CreateExecutionPathParams>(
    'POST',
    (paramsInPath: CreateExecutionPathParams) => `/pipelines/${paramsInPath.pipeline}/executions`,
    { base: getConfig('pm/api/v1'), pathParams: { pipeline }, ...props }
  )

export interface DeleteExecutionQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export interface DeleteExecutionPathParams {
  pipeline: string
}

export type DeleteExecutionProps = Omit<
  MutateProps<void, Error, DeleteExecutionQueryParams, string, DeleteExecutionPathParams>,
  'path' | 'verb'
> &
  DeleteExecutionPathParams

export const DeleteExecution = ({ pipeline, ...props }: DeleteExecutionProps) => (
  <Mutate<void, Error, DeleteExecutionQueryParams, string, DeleteExecutionPathParams>
    verb="DELETE"
    path={`/pipelines/${pipeline}/executions`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseDeleteExecutionProps = Omit<
  UseMutateProps<void, Error, DeleteExecutionQueryParams, string, DeleteExecutionPathParams>,
  'path' | 'verb'
> &
  DeleteExecutionPathParams

export const useDeleteExecution = ({ pipeline, ...props }: UseDeleteExecutionProps) =>
  useMutate<void, Error, DeleteExecutionQueryParams, string, DeleteExecutionPathParams>(
    'DELETE',
    (paramsInPath: DeleteExecutionPathParams) => `/pipelines/${paramsInPath.pipeline}/executions`,
    { base: getConfig('pm/api/v1'), pathParams: { pipeline }, ...props }
  )

export interface GetExecutionQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export interface GetExecutionPathParams {
  pipeline: string
  execution: string
}

export type GetExecutionProps = Omit<
  GetProps<Execution, Error, GetExecutionQueryParams, GetExecutionPathParams>,
  'path'
> &
  GetExecutionPathParams

export const GetExecution = ({ pipeline, execution, ...props }: GetExecutionProps) => (
  <Get<Execution, Error, GetExecutionQueryParams, GetExecutionPathParams>
    path={`/pipelines/${pipeline}/executions/${execution}`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseGetExecutionProps = Omit<
  UseGetProps<Execution, Error, GetExecutionQueryParams, GetExecutionPathParams>,
  'path'
> &
  GetExecutionPathParams

export const useGetExecution = ({ pipeline, execution, ...props }: UseGetExecutionProps) =>
  useGet<Execution, Error, GetExecutionQueryParams, GetExecutionPathParams>(
    (paramsInPath: GetExecutionPathParams) =>
      `/pipelines/${paramsInPath.pipeline}/executions/${paramsInPath.execution}`,
    { base: getConfig('pm/api/v1'), pathParams: { pipeline, execution }, ...props }
  )

export interface UpdateExecutionQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  routingId?: string
}

export interface UpdateExecutionPathParams {
  pipeline: string
  execution: string
}

export type UpdateExecutionProps = Omit<
  MutateProps<Execution, Error, UpdateExecutionQueryParams, ExecutionUpdateRequest, UpdateExecutionPathParams>,
  'path' | 'verb'
> &
  UpdateExecutionPathParams

export const UpdateExecution = ({ pipeline, execution, ...props }: UpdateExecutionProps) => (
  <Mutate<Execution, Error, UpdateExecutionQueryParams, ExecutionUpdateRequest, UpdateExecutionPathParams>
    verb="PATCH"
    path={`/pipelines/${pipeline}/executions/${execution}`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseUpdateExecutionProps = Omit<
  UseMutateProps<Execution, Error, UpdateExecutionQueryParams, ExecutionUpdateRequest, UpdateExecutionPathParams>,
  'path' | 'verb'
> &
  UpdateExecutionPathParams

export const useUpdateExecution = ({ pipeline, execution, ...props }: UseUpdateExecutionProps) =>
  useMutate<Execution, Error, UpdateExecutionQueryParams, ExecutionUpdateRequest, UpdateExecutionPathParams>(
    'PATCH',
    (paramsInPath: UpdateExecutionPathParams) =>
      `/pipelines/${paramsInPath.pipeline}/executions/${paramsInPath.execution}`,
    { base: getConfig('pm/api/v1'), pathParams: { pipeline, execution }, ...props }
  )

export type OnRegisterProps = Omit<MutateProps<Token, Error, void, void, void>, 'path' | 'verb'>

export const OnRegister = (props: OnRegisterProps) => (
  <Mutate<Token, Error, void, void, void> verb="POST" path={`/register`} base={getConfig('pm/api/v1')} {...props} />
)

export type UseOnRegisterProps = Omit<UseMutateProps<Token, Error, void, void, void>, 'path' | 'verb'>

export const useOnRegister = (props: UseOnRegisterProps) =>
  useMutate<Token, Error, void, void, void>('POST', `/register`, { base: getConfig('pm/api/v1'), ...props })

export type GetUserProps = Omit<GetProps<User, Error, void, void>, 'path'>

export const GetUser = (props: GetUserProps) => (
  <Get<User, Error, void, void> path={`/user`} base={getConfig('pm/api/v1')} {...props} />
)

export type UseGetUserProps = Omit<UseGetProps<User, Error, void, void>, 'path'>

export const useGetUser = (props: UseGetUserProps) =>
  useGet<User, Error, void, void>(`/user`, { base: getConfig('pm/api/v1'), ...props })

export type UpdateUserProps = Omit<MutateProps<User, Error, void, UserInput, void>, 'path' | 'verb'>

export const UpdateUser = (props: UpdateUserProps) => (
  <Mutate<User, Error, void, UserInput, void> verb="PATCH" path={`/user`} base={getConfig('pm/api/v1')} {...props} />
)

export type UseUpdateUserProps = Omit<UseMutateProps<User, Error, void, UserInput, void>, 'path' | 'verb'>

export const useUpdateUser = (props: UseUpdateUserProps) =>
  useMutate<User, Error, void, UserInput, void>('PATCH', `/user`, { base: getConfig('pm/api/v1'), ...props })

export type CreateTokenProps = Omit<MutateProps<User, Error, void, Token, void>, 'path' | 'verb'>

export const CreateToken = (props: CreateTokenProps) => (
  <Mutate<User, Error, void, Token, void> verb="POST" path={`/user/token`} base={getConfig('pm/api/v1')} {...props} />
)

export type UseCreateTokenProps = Omit<UseMutateProps<User, Error, void, Token, void>, 'path' | 'verb'>

export const useCreateToken = (props: UseCreateTokenProps) =>
  useMutate<User, Error, void, Token, void>('POST', `/user/token`, { base: getConfig('pm/api/v1'), ...props })

export interface ListUsersQueryParams {
  sort?: 'id' | 'email' | 'created' | 'updated'
  direction?: 'asc' | 'desc'
  page?: number
  per_page?: number
}

export type ListUsersProps = Omit<GetProps<User[], Error, ListUsersQueryParams, void>, 'path'>

export const ListUsers = (props: ListUsersProps) => (
  <Get<User[], Error, ListUsersQueryParams, void> path={`/users`} base={getConfig('pm/api/v1')} {...props} />
)

export type UseListUsersProps = Omit<UseGetProps<User[], Error, ListUsersQueryParams, void>, 'path'>

export const useListUsers = (props: UseListUsersProps) =>
  useGet<User[], Error, ListUsersQueryParams, void>(`/users`, { base: getConfig('pm/api/v1'), ...props })

export type CreateUserProps = Omit<MutateProps<User, Error, void, UserInput, void>, 'path' | 'verb'>

export const CreateUser = (props: CreateUserProps) => (
  <Mutate<User, Error, void, UserInput, void> verb="POST" path={`/users`} base={getConfig('pm/api/v1')} {...props} />
)

export type UseCreateUserProps = Omit<UseMutateProps<User, Error, void, UserInput, void>, 'path' | 'verb'>

export const useCreateUser = (props: UseCreateUserProps) =>
  useMutate<User, Error, void, UserInput, void>('POST', `/users`, { base: getConfig('pm/api/v1'), ...props })

export type DeleteUserProps = Omit<MutateProps<void, Error, void, string, void>, 'path' | 'verb'>

export const DeleteUser = (props: DeleteUserProps) => (
  <Mutate<void, Error, void, string, void> verb="DELETE" path={`/users`} base={getConfig('pm/api/v1')} {...props} />
)

export type UseDeleteUserProps = Omit<UseMutateProps<void, Error, void, string, void>, 'path' | 'verb'>

export const useDeleteUser = (props: UseDeleteUserProps) =>
  useMutate<void, Error, void, string, void>('DELETE', `/users`, { base: getConfig('pm/api/v1'), ...props })

export interface GetUserEmailPathParams {
  email: string
}

export type GetUserEmailProps = Omit<GetProps<User, Error, void, GetUserEmailPathParams>, 'path'> &
  GetUserEmailPathParams

export const GetUserEmail = ({ email, ...props }: GetUserEmailProps) => (
  <Get<User, Error, void, GetUserEmailPathParams> path={`/users/${email}`} base={getConfig('pm/api/v1')} {...props} />
)

export type UseGetUserEmailProps = Omit<UseGetProps<User, Error, void, GetUserEmailPathParams>, 'path'> &
  GetUserEmailPathParams

export const useGetUserEmail = ({ email, ...props }: UseGetUserEmailProps) =>
  useGet<User, Error, void, GetUserEmailPathParams>(
    (paramsInPath: GetUserEmailPathParams) => `/users/${paramsInPath.email}`,
    { base: getConfig('pm/api/v1'), pathParams: { email }, ...props }
  )

export interface UpdateUsersPathParams {
  email: string
}

export type UpdateUsersProps = Omit<
  MutateProps<User, Error, void, UserUpdateRequest, UpdateUsersPathParams>,
  'path' | 'verb'
> &
  UpdateUsersPathParams

export const UpdateUsers = ({ email, ...props }: UpdateUsersProps) => (
  <Mutate<User, Error, void, UserUpdateRequest, UpdateUsersPathParams>
    verb="PATCH"
    path={`/users/${email}`}
    base={getConfig('pm/api/v1')}
    {...props}
  />
)

export type UseUpdateUsersProps = Omit<
  UseMutateProps<User, Error, void, UserUpdateRequest, UpdateUsersPathParams>,
  'path' | 'verb'
> &
  UpdateUsersPathParams

export const useUpdateUsers = ({ email, ...props }: UseUpdateUsersProps) =>
  useMutate<User, Error, void, UserUpdateRequest, UpdateUsersPathParams>(
    'PATCH',
    (paramsInPath: UpdateUsersPathParams) => `/users/${paramsInPath.email}`,
    { base: getConfig('pm/api/v1'), pathParams: { email }, ...props }
  )
