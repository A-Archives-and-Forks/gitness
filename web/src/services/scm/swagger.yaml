openapi: 3.0.0
info:
  title: API Specification
  version: 1.0.0
servers:
- url: /api/v1/
security:
- bearerAuth: []
paths:
  /api/user/currentUser:
    get:
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiCurrentUserResponse'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - user
  /login:
    post:
      operationId: onLogin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormDataOpenapiLoginRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - account
  /register:
    post:
      operationId: onRegister
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormDataOpenapiRegisterRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - account
  /repos:
    post:
      operationId: createRepository
      parameters:
      - description: path of parent space (Not needed in standalone).
        in: query
        name: spacePath
        required: false
        schema:
          default: false
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateRepositoryRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repoRef}:
    delete:
      operationId: deleteRepository
      parameters:
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
    get:
      operationId: findRepository
      parameters:
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
    patch:
      operationId: updateRepository
      parameters:
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateRepoRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repoRef}/branches:
    get:
      operationId: listBranches
      parameters:
      - description: Indicates whether optional commit information should be included
          in the response.
        in: query
        name: include_commit
        required: false
        schema:
          default: false
          type: boolean
      - description: The substring by which the branches are filtered.
        in: query
        name: query
        required: false
        schema:
          type: string
      - description: The order of the output.
        in: query
        name: direction
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
      - description: The data by which the branches are sorted.
        in: query
        name: sort
        required: false
        schema:
          default: name
          enum:
          - name
          - date
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The number of entries returned per page.
        in: query
        name: per_page
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoBranch'
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
    post:
      operationId: createBranch
      parameters:
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateBranchRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoBranch'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repoRef}/branches/{name}:
    delete:
      operationId: deleteBranch
      parameters:
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repoRef}/commits:
    get:
      operationId: listCommits
      parameters:
      - description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        in: query
        name: git_ref
        required: false
        schema:
          default: '{Repository Default Branch}'
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The number of entries returned per page.
        in: query
        name: per_page
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoCommit'
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repoRef}/content/{path}:
    get:
      operationId: getContent
      parameters:
      - description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        in: query
        name: git_ref
        required: false
        schema:
          default: '{Repository Default Branch}'
          type: string
      - description: Indicates whether optional commit information should be included
          in the response.
        in: query
        name: include_commit
        required: false
        schema:
          default: false
          type: boolean
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      - in: path
        name: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiGetContentOutput'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repoRef}/move:
    post:
      operationId: moveRepository
      parameters:
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveRepoRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repoRef}/paths:
    get:
      operationId: listRepositoryPaths
      parameters:
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The number of entries returned per page.
        in: query
        name: per_page
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPath'
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
    post:
      operationId: createRepositoryPath
      parameters:
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateRepoPathRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPath'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repoRef}/paths/{pathID}:
    delete:
      operationId: deleteRepositoryPath
      parameters:
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      - in: path
        name: pathID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repoRef}/serviceAccounts:
    get:
      operationId: listRepositoryServiceAccounts
      parameters:
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesServiceAccount'
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /repos/{repoRef}/tags:
    get:
      operationId: listTags
      parameters:
      - description: Indicates whether optional commit information should be included
          in the response.
        in: query
        name: include_commit
        required: false
        schema:
          default: false
          type: boolean
      - description: The substring by which the tags are filtered.
        in: query
        name: query
        required: false
        schema:
          type: string
      - description: The order of the output.
        in: query
        name: direction
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
      - description: The data by which the tags are sorted.
        in: query
        name: sort
        required: false
        schema:
          default: name
          enum:
          - name
          - date
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The number of entries returned per page.
        in: query
        name: per_page
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: repoRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoCommitTag'
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - repository
  /resources/gitignore:
    get:
      operationId: listGitignore
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - resource
  /resources/license:
    get:
      operationId: listLicenses
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - resource
  /spaces:
    post:
      operationId: createSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateSpaceRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{spaceRef}:
    delete:
      operationId: deleteSpace
      parameters:
      - in: path
        name: spaceRef
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
    get:
      operationId: getSpace
      parameters:
      - in: path
        name: spaceRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
    patch:
      operationId: updateSpace
      parameters:
      - in: path
        name: spaceRef
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateSpaceRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{spaceRef}/move:
    post:
      operationId: moveSpace
      parameters:
      - in: path
        name: spaceRef
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveSpaceRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{spaceRef}/paths:
    get:
      operationId: listPaths
      parameters:
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The number of entries returned per page.
        in: query
        name: per_page
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: spaceRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPath'
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
    post:
      operationId: createPath
      parameters:
      - in: path
        name: spaceRef
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreatePathRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPath'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{spaceRef}/paths/{pathID}:
    delete:
      operationId: deletePath
      parameters:
      - in: path
        name: spaceRef
        required: true
        schema:
          type: string
      - in: path
        name: pathID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{spaceRef}/repos:
    get:
      operationId: listRepos
      parameters:
      - description: The substring which is used to filter the repositories by their
          path name.
        in: query
        name: query
        required: false
        schema:
          type: string
      - description: The data by which the repositories are sorted.
        in: query
        name: sort
        required: false
        schema:
          default: uid
          enum:
          - uid
          - path
          - created
          - updated
          type: string
      - description: The order of the output.
        in: query
        name: direction
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The number of entries returned per page.
        in: query
        name: per_page
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: spaceRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesRepository'
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{spaceRef}/serviceAccounts:
    get:
      operationId: listServiceAccounts
      parameters:
      - in: path
        name: spaceRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesServiceAccount'
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /spaces/{spaceRef}/spaces:
    get:
      operationId: listSpaces
      parameters:
      - description: The substring which is used to filter the spaces by their path
          name.
        in: query
        name: query
        required: false
        schema:
          type: string
      - description: The data by which the spaces are sorted.
        in: query
        name: sort
        required: false
        schema:
          default: uid
          enum:
          - uid
          - path
          - created
          - updated
          type: string
      - description: The order of the output.
        in: query
        name: direction
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
      - description: The page to return.
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: The number of entries returned per page.
        in: query
        name: per_page
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
      - in: path
        name: spaceRef
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesSpace'
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - space
  /user:
    get:
      operationId: getUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - user
    patch:
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - user
  /user/token:
    post:
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypesTokenResponse'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - user
  /users:
    get:
      operationId: listUsers
      parameters:
      - in: query
        name: sort
        schema:
          enum:
          - id
          - email
          - created
          - updated
          type: string
      - in: query
        name: direction
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: query
        name: page
        schema:
          default: 1
          type: integer
      - in: query
        name: per_page
        schema:
          default: 100
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesUser'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - users
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypesUserInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - users
  /users/{email}:
    delete:
      operationId: deleteUser
      parameters:
      - in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - users
    get:
      operationId: getUserEmail
      parameters:
      - in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
      - users
components:
  schemas:
    EnumAccessGrant:
      type: integer
    EnumParentResourceType:
      type: string
    EnumPathTargetType:
      type: string
    EnumTokenType:
      type: string
    FormDataOpenapiLoginRequest:
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    FormDataOpenapiRegisterRequest:
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    OpenapiContent:
      oneOf:
      - $ref: '#/components/schemas/RepoFileContent'
      - $ref: '#/components/schemas/OpenapiDirContent'
      - $ref: '#/components/schemas/RepoSymlinkContent'
      - $ref: '#/components/schemas/RepoSubmoduleContent'
      type: object
    OpenapiContentInfo:
      properties:
        latestCommit:
          $ref: '#/components/schemas/RepoCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
      type: object
    OpenapiContentType:
      enum:
      - file
      - dir
      - symlink
      - submodule
      type: string
    OpenapiCreateBranchRequest:
      properties:
        name:
          type: string
        target:
          nullable: true
          type: string
      type: object
    OpenapiCreatePathRequest:
      properties:
        path:
          type: string
      type: object
    OpenapiCreateRepoPathRequest:
      properties:
        path:
          type: string
      type: object
    OpenapiCreateRepositoryRequest:
      properties:
        defaultBranch:
          type: string
        description:
          type: string
        forkId:
          type: integer
        gitIgnore:
          type: string
        isPublic:
          type: boolean
        license:
          type: string
        parentID:
          type: integer
        readme:
          type: boolean
        uid:
          type: string
      type: object
    OpenapiCreateSpaceRequest:
      properties:
        description:
          type: string
        isPublic:
          type: boolean
        parentId:
          type: integer
        uid:
          type: string
      type: object
    OpenapiCurrentUserResponse:
      properties:
        data:
          $ref: '#/components/schemas/TypesUser'
        status:
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
          type: string
      type: object
    OpenapiDirContent:
      properties:
        entries:
          items:
            $ref: '#/components/schemas/OpenapiContentInfo'
          nullable: true
          type: array
      type: object
    OpenapiGetContentOutput:
      properties:
        content:
          $ref: '#/components/schemas/OpenapiContent'
        latestCommit:
          $ref: '#/components/schemas/RepoCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
      type: object
    OpenapiMoveRepoRequest:
      properties:
        keepAsAlias:
          type: boolean
        parentId:
          nullable: true
          type: integer
        uid:
          nullable: true
          type: string
      type: object
    OpenapiMoveSpaceRequest:
      properties:
        keepAsAlias:
          type: boolean
        parentId:
          nullable: true
          type: integer
        uid:
          nullable: true
          type: string
      type: object
    OpenapiUpdateRepoRequest:
      properties:
        description:
          nullable: true
          type: string
        isPublic:
          nullable: true
          type: boolean
      type: object
    OpenapiUpdateSpaceRequest:
      properties:
        description:
          nullable: true
          type: string
        isPublic:
          nullable: true
          type: boolean
      type: object
    RepoBranch:
      properties:
        commit:
          $ref: '#/components/schemas/RepoCommit'
        name:
          type: string
        sha:
          type: string
      type: object
    RepoCommit:
      properties:
        author:
          $ref: '#/components/schemas/RepoSignature'
        committer:
          $ref: '#/components/schemas/RepoSignature'
        message:
          type: string
        sha:
          type: string
        title:
          type: string
      type: object
    RepoCommitTag:
      properties:
        commit:
          $ref: '#/components/schemas/RepoCommit'
        isAnnotated:
          type: boolean
        message:
          type: string
        name:
          type: string
        sha:
          type: string
        tagger:
          $ref: '#/components/schemas/RepoSignature'
        title:
          type: string
      type: object
    RepoContent: {}
    RepoContentInfo:
      properties:
        latestCommit:
          $ref: '#/components/schemas/RepoCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/RepoContentType'
      type: object
    RepoContentType:
      type: string
    RepoFileContent:
      properties:
        data:
          type: string
        encoding:
          $ref: '#/components/schemas/RepoFileEncodingType'
        size:
          type: integer
      type: object
    RepoFileEncodingType:
      type: string
    RepoIdentity:
      properties:
        email:
          type: string
        name:
          type: string
      type: object
    RepoSignature:
      properties:
        identity:
          $ref: '#/components/schemas/RepoIdentity'
        when:
          format: date-time
          type: string
      type: object
    RepoSubmoduleContent:
      properties:
        commitSha:
          type: string
        url:
          type: string
      type: object
    RepoSymlinkContent:
      properties:
        size:
          type: integer
        target:
          type: string
      type: object
    TypesPath:
      properties:
        created:
          type: integer
        createdBy:
          type: integer
        id:
          type: integer
        isAlias:
          type: boolean
        targetId:
          type: integer
        targetType:
          $ref: '#/components/schemas/EnumPathTargetType'
        updated:
          type: integer
        value:
          type: string
      type: object
    TypesRepository:
      properties:
        created:
          type: integer
        createdBy:
          type: integer
        defaultBranch:
          type: string
        description:
          type: string
        forkId:
          type: integer
        gitUrl:
          type: string
        id:
          type: integer
        isPublic:
          type: boolean
        numClosedPulls:
          type: integer
        numForks:
          type: integer
        numOpenPulls:
          type: integer
        numPulls:
          type: integer
        parentId:
          type: integer
        path:
          type: string
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesServiceAccount:
      properties:
        blocked:
          type: boolean
        created:
          type: integer
        displayName:
          type: string
        email:
          type: string
        parentId:
          type: integer
        parentType:
          $ref: '#/components/schemas/EnumParentResourceType'
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesSpace:
      properties:
        created:
          type: integer
        createdBy:
          type: integer
        description:
          type: string
        id:
          type: integer
        isPublic:
          type: boolean
        parentId:
          type: integer
        path:
          type: string
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesToken:
      properties:
        createdBy:
          type: integer
        expiresAt:
          type: integer
        grants:
          $ref: '#/components/schemas/EnumAccessGrant'
        issuedAt:
          type: integer
        principalId:
          type: integer
        type:
          $ref: '#/components/schemas/EnumTokenType'
        uid:
          type: string
      type: object
    TypesTokenResponse:
      properties:
        access_token:
          type: string
        token:
          $ref: '#/components/schemas/TypesToken'
      type: object
    TypesUser:
      properties:
        admin:
          type: boolean
        blocked:
          type: boolean
        created:
          type: integer
        displayName:
          type: string
        email:
          type: string
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesUserInput:
      properties:
        admin:
          nullable: true
          type: boolean
        email:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
      type: object
    UserUpdateInput:
      properties:
        displayName:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
      type: object
    UsererrorError:
      properties:
        message:
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http